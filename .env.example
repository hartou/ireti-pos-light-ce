# Production Environment Variables for Ireti POS Light
# Copy this file to .env and update values for your deployment

# Database Configuration
POSTGRES_DB=iretiposlightdb
POSTGRES_USER=iretiposlightuser
POSTGRES_PASSWORD=your_secure_database_password_here

# Django Configuration
DJANGO_SECRET_KEY=your_very_long_and_secure_secret_key_here
DJANGO_DEBUG=False
DJANGO_ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com,localhost

# Default Admin User
DJANGO_SUPERUSER_USERNAME=admin
DJANGO_SUPERUSER_EMAIL=admin@yourdomain.com
DJANGO_SUPERUSER_PASSWORD=your_secure_admin_password_here

# GitHub Container Registry (for docker-compose.prod.yml)
GITHUB_REPOSITORY=hartou/ireti-pos-light

# ========================================
# STRIPE PAYMENT CONFIGURATION
# ========================================
# IMPORTANT: PCI DSS Compliance Requirements
# - Never commit real keys to version control
# - Use test keys for development (pk_test_/sk_test_)
# - Use live keys only in production (pk_live_/sk_live_)
# - Store keys securely in production (use secrets management)
# - Rotate keys regularly and after any potential compromise

# Stripe API Keys
# Get these from your Stripe Dashboard: https://dashboard.stripe.com/apikeys
# Test keys (for development - safe to use in .env.example)
STRIPE_PUBLISHABLE_KEY=pk_test_51234567890abcdef_your_publishable_key_here
STRIPE_SECRET_KEY=sk_test_51234567890abcdef_your_secret_key_here

# Production Keys (NEVER commit real production keys!)
# STRIPE_PUBLISHABLE_KEY=pk_live_51234567890abcdef_your_production_publishable_key_here
# STRIPE_SECRET_KEY=sk_live_51234567890abcdef_your_production_secret_key_here

# Stripe Webhook Configuration
# 1. Create webhook endpoint in Stripe Dashboard: https://dashboard.stripe.com/webhooks
# 2. Set endpoint URL to: https://yourdomain.com/payments/webhooks/stripe/
# 3. Select these events:
#    - payment_intent.succeeded
#    - payment_intent.payment_failed
#    - charge.dispute.created
#    - invoice.payment_succeeded
#    - invoice.payment_failed
# 4. Copy the webhook signing secret below
STRIPE_WEBHOOK_ENDPOINT_SECRET=whsec_1234567890abcdef_your_webhook_signing_secret_here

# Stripe Configuration Options
# Currency for payments (ISO 4217 currency code)
STRIPE_CURRENCY=USD

# Minimum charge amount (in currency's smallest unit, e.g., cents for USD)
STRIPE_MINIMUM_CHARGE=50

# Maximum refund days (Stripe allows refunds within this timeframe)
STRIPE_REFUND_DAYS_LIMIT=120

# Payment timeout in seconds (default: 300 seconds = 5 minutes)
STRIPE_PAYMENT_TIMEOUT=300

# Enable/disable automatic payment capture (true/false)
# If false, payments require manual capture
STRIPE_AUTO_CAPTURE=true

# Webhook endpoint timeout in seconds
STRIPE_WEBHOOK_TIMEOUT=10

# SECURITY BEST PRACTICES:
# 1. Production Environment:
#    - Use environment-specific secrets management (AWS Secrets Manager, Azure Key Vault, etc.)
#    - Enable MFA on Stripe account
#    - Set up IP allowlists for API access
#    - Monitor API usage and set up alerts
#    - Enable webhook signature verification (always enabled in this app)
#
# 2. Development Environment:
#    - Always use test keys (pk_test_/sk_test_)
#    - Never use production keys in development
#    - Test with Stripe's test card numbers
#
# 3. Monitoring and Logging:
#    - Monitor payment success/failure rates
#    - Set up alerts for unusual activity
#    - Log all payment operations (without sensitive data)
#    - Regular security audits of payment flows
#
# 4. PCI DSS Compliance:
#    - This application is PCI DSS compliant when configured correctly
#    - Never store card data (handled by Stripe)
#    - Use HTTPS for all payment-related communications
#    - Implement proper access controls and audit logging

# Optional: Email Configuration (for password reset, etc.)
# EMAIL_HOST=smtp.gmail.com
# EMAIL_PORT=587
# EMAIL_USE_TLS=True
# EMAIL_HOST_USER=your_email@gmail.com
# EMAIL_HOST_PASSWORD=your_app_password
