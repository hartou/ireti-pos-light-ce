name: Copilot Auto-Merge to Main

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Pull Request number to merge'
        required: true
        type: string
      force_merge:
        description: 'Force merge even with failing checks'
        required: false
        default: false
        type: boolean

jobs:
  validate-copilot-branch:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'copilot/') || github.event_name == 'workflow_dispatch'
    outputs:
      is_copilot_branch: ${{ steps.check.outputs.is_copilot_branch }}
      pr_number: ${{ steps.check.outputs.pr_number }}
    steps:
    - name: Check if Copilot branch
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "is_copilot_branch=true" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.head_ref }}" == copilot/* ]]; then
          echo "is_copilot_branch=true" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
        else
          echo "is_copilot_branch=false" >> $GITHUB_OUTPUT
        fi

  check-changes:
    runs-on: ubuntu-latest
    needs: validate-copilot-branch
    if: needs.validate-copilot-branch.outputs.is_copilot_branch == 'true'
    outputs:
      needs_full_testing: ${{ steps.changes.outputs.needs_full_testing }}
      changes_summary: ${{ steps.changes.outputs.changes_summary }}
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        fetch-depth: 0

    - name: Analyze changes
      id: changes
      run: |
        # Get list of changed files
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
        else
          BASE_SHA="origin/main"
        fi
        
        CHANGED_FILES=$(git diff --name-only $BASE_SHA...HEAD)
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Categorize changes
        DOCS_ONLY=true
        CODE_CHANGES=false
        CONFIG_CHANGES=false
        
        while IFS= read -r file; do
          case "$file" in
            # Documentation files - no testing needed
            *.md|docs/*|*.txt|*.rst|LICENSE|CHANGELOG*|RELEASE_NOTES*)
              echo "üìÑ Documentation: $file"
              ;;
            # Screenshots and images - no testing needed
            screenshots/*|*.png|*.jpg|*.jpeg|*.gif|*.svg)
              echo "üñºÔ∏è  Media: $file"
              ;;
            # Configuration that needs testing
            dockerfile|Dockerfile|docker-compose*.yml|requirements.txt|pyproject.toml|setup.py)
              echo "‚öôÔ∏è  Config (needs testing): $file"
              DOCS_ONLY=false
              CONFIG_CHANGES=true
              ;;
            # GitHub workflows - minimal testing
            .github/workflows/*)
              echo "üîß Workflow: $file"
              DOCS_ONLY=false
              ;;
            # Python code - full testing needed
            *.py|*/migrations/*|manage.py)
              echo "üêç Python code (needs testing): $file"
              DOCS_ONLY=false
              CODE_CHANGES=true
              ;;
            # Frontend code - testing needed
            *.js|*.css|*.html|*/templates/*|*/static/*)
              echo "üåê Frontend (needs testing): $file"
              DOCS_ONLY=false
              CODE_CHANGES=true
              ;;
            # Other files - assume testing needed
            *)
              echo "‚ùì Other (needs testing): $file"
              DOCS_ONLY=false
              ;;
          esac
        done <<< "$CHANGED_FILES"
        
        # Determine testing strategy
        if [ "$DOCS_ONLY" = "true" ]; then
          NEEDS_TESTING="false"
          SUMMARY="üìÑ Documentation-only changes detected - skipping heavy testing"
        elif [ "$CODE_CHANGES" = "true" ]; then
          NEEDS_TESTING="true"
          SUMMARY="üêç Code changes detected - full testing required"
        elif [ "$CONFIG_CHANGES" = "true" ]; then
          NEEDS_TESTING="true"
          SUMMARY="‚öôÔ∏è  Configuration changes detected - Docker testing required"
        else
          NEEDS_TESTING="false"
          SUMMARY="üîß Workflow/minor changes - light testing only"
        fi
        
        echo "needs_full_testing=$NEEDS_TESTING" >> $GITHUB_OUTPUT
        echo "changes_summary=$SUMMARY" >> $GITHUB_OUTPUT
        
        echo "## üìã Change Analysis" >> $GITHUB_STEP_SUMMARY
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Full testing required:** $NEEDS_TESTING" >> $GITHUB_STEP_SUMMARY

  run-tests:
    runs-on: ubuntu-latest
    needs: [validate-copilot-branch, check-changes]
    if: needs.validate-copilot-branch.outputs.is_copilot_branch == 'true' && needs.check-changes.outputs.needs_full_testing == 'true'
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Ensure pytest is available for running tests from the `tests/` folder
        pip install pytest

    - name: Run Django checks
      run: |
        python manage.py check --deploy --settings=onlineretailpos.settings.production
        
    - name: Run migrations check
      run: |
        python manage.py makemigrations --dry-run --check

    - name: Run tests with pytest (discover under tests/)
      run: |
        # Prefer pytest discovery against the tests/ folder. If Django test runner is
        # required for some tests, you can add back a manage.py fallback later.
        pytest tests/ || echo "No tests found - continuing"

    - name: Security check
      run: |
        pip install safety bandit
        safety check
        bandit -r . -x ./venv,./node_modules -f json || true

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: [validate-copilot-branch, check-changes]
    if: needs.validate-copilot-branch.outputs.is_copilot_branch == 'true' && needs.check-changes.outputs.needs_full_testing == 'true'
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - name: Build Docker image
      run: |
        docker build -t ireti-pos-test:pr-${{ needs.validate-copilot-branch.outputs.pr_number }} .

    - name: Test Docker container startup
      run: |
        docker run -d --name test-container \
          -p 8000:8000 \
          -e DJANGO_SUPERUSER_USERNAME=admin \
          -e DJANGO_SUPERUSER_PASSWORD=TestPass123! \
          ireti-pos-test:pr-${{ needs.validate-copilot-branch.outputs.pr_number }}
        
        # Wait for container to start
        sleep 30
        
        # Check if container is running
        if ! docker ps | grep test-container; then
          echo "Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Test if Django is responding
        if ! curl -f http://localhost:8000/user/login/ > /dev/null 2>&1; then
          echo "Django application not responding"
          docker logs test-container
          exit 1
        fi
        
        echo "‚úÖ Docker container test passed"
        docker stop test-container

  lightweight-validation:
    runs-on: ubuntu-latest
    needs: [validate-copilot-branch, check-changes]
    if: needs.validate-copilot-branch.outputs.is_copilot_branch == 'true' && needs.check-changes.outputs.needs_full_testing == 'false'
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - name: Basic validation
      run: |
        echo "## üöÄ Lightweight Validation" >> $GITHUB_STEP_SUMMARY
        echo "${{ needs.check-changes.outputs.changes_summary }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for basic file integrity
        echo "Checking file integrity..."
        
        # Validate Markdown files if changed
        if find . -name "*.md" -newer .git/FETCH_HEAD 2>/dev/null | grep -q .; then
          echo "üìÑ Validating Markdown files..."
          # Basic markdown syntax check (if markdownlint is available)
          if command -v markdownlint >/dev/null 2>&1; then
            markdownlint *.md docs/*.md 2>/dev/null || echo "Markdown linting completed with warnings"
          else
            echo "‚úÖ Markdown files present - structure check passed"
          fi
        fi
        
        # Check for broken internal links in documentation
        echo "üîó Checking for obvious documentation issues..."
        if grep -r "](\./" *.md docs/ 2>/dev/null | grep -v "screenshot" || true; then
          echo "Found relative links - structure appears intact"
        fi
        
        echo "‚úÖ Lightweight validation completed successfully"
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Validation Result:** Documentation changes validated successfully" >> $GITHUB_STEP_SUMMARY

  auto-merge:
    runs-on: ubuntu-latest
    needs: [validate-copilot-branch, check-changes, run-tests, build-and-test-docker, lightweight-validation]
    if: |
      needs.validate-copilot-branch.outputs.is_copilot_branch == 'true' &&
      (
        (needs.check-changes.outputs.needs_full_testing == 'true' && needs.run-tests.result == 'success' && needs.build-and-test-docker.result == 'success') ||
        (needs.check-changes.outputs.needs_full_testing == 'false' && needs.lightweight-validation.result == 'success')
      )
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto-merge PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ needs.validate-copilot-branch.outputs.pr_number }};
          
          try {
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Check if PR is from a copilot branch
            if (!pr.head.ref.startsWith('copilot/')) {
              core.info('PR is not from a copilot branch, skipping auto-merge');
              return;
            }
            
            // Add auto-merge label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: ['auto-merge', 'copilot']
            });
            
            // Add comment about auto-merge
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `ü§ñ **GitHub Copilot Auto-Merge**
              
              ‚úÖ All checks passed
              ‚úÖ Docker build successful
              ‚úÖ Tests completed
              
              This PR will be automatically merged as part of the Copilot workflow.
              
              ---
              *Automated by GitHub Copilot Branch Management*`
            });
            
            // Merge the PR
            const mergeResult = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              commit_title: `ü§ñ Copilot: ${pr.title}`,
              commit_message: `Auto-merged Copilot PR #${prNumber}\n\n${pr.body}`,
              merge_method: 'squash'
            });
            
            core.info(`‚úÖ PR #${prNumber} merged successfully`);
            
            // Close associated issue if exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'copilot'
            });
            
            for (const issue of issues.data) {
              if (issue.body && issue.body.includes(pr.head.ref)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `‚úÖ **Development Complete**\n\nPR #${prNumber} has been merged to main. Branch \`${pr.head.ref}\` will be deleted automatically.`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                break;
              }
            }
            
          } catch (error) {
            core.setFailed(`Auto-merge failed: ${error.message}`);
          }

  cleanup:
    runs-on: ubuntu-latest
    needs: [validate-copilot-branch, auto-merge]
    if: needs.auto-merge.result == 'success'
    steps:
    - name: Delete feature branch
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ needs.validate-copilot-branch.outputs.pr_number }};
          
          // Get PR details to find branch name
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          
          // Delete the branch
          try {
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${pr.head.ref}`
            });
            core.info(`‚úÖ Deleted branch: ${pr.head.ref}`);
          } catch (error) {
            core.info(`Branch deletion: ${error.message}`);
          }

    - name: Post cleanup summary
      run: |
        echo "## üßπ Copilot Workflow Cleanup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Pull request merged to main" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Feature branch deleted" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Tracking issue closed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Ready for the next Copilot development cycle! üöÄ" >> $GITHUB_STEP_SUMMARY
