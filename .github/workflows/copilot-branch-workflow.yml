name: GitHub Copilot Branch Management

on:
  workflow_dispatch:
    inputs:
      feature_name:
        description: 'Name of the feature/fix (will be used as branch name)'
        required: true
        type: string
      description:
        description: 'Description of the changes'
        required: true
        type: string
      merge_after_completion:
        description: 'Auto-merge to main after completion'
        required: false
        default: true
        type: boolean

env:
  BRANCH_PREFIX: "copilot/"

jobs:
  create-branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch.outputs.branch_name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "GitHub Copilot Bot"
        git config --global user.email "copilot@github.com"

    - name: Create feature branch
      id: branch
      run: |
        # Sanitize feature name for branch naming
        FEATURE_NAME=$(echo "${{ github.event.inputs.feature_name }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BRANCH_NAME="${{ env.BRANCH_PREFIX }}${FEATURE_NAME}-${TIMESTAMP}"
        
        echo "Creating branch: $BRANCH_NAME"
        git checkout -b "$BRANCH_NAME"
        git push -u origin "$BRANCH_NAME"
        
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "## ðŸš€ Copilot Branch Created" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
        echo "**Feature:** ${{ github.event.inputs.feature_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Description:** ${{ github.event.inputs.description }}" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub issue for tracking
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸ¤– Copilot: ${{ github.event.inputs.feature_name }}`,
            body: `## GitHub Copilot Development Task
          
          **Branch:** \`${{ steps.branch.outputs.branch_name }}\`
          **Triggered by:** @${{ github.actor }}
          **Started:** ${{ steps.branch.outputs.timestamp }}
          
          ### Description
          ${{ github.event.inputs.description }}
          
          ### Development Workflow
          - [x] Feature branch created from main
          - [ ] Development in progress
          - [ ] Testing completed
          - [ ] Pull request created
          - [ ] Code review completed
          - [ ] Merged to main
          
          ### Branch Protection
          This branch follows the Copilot workflow:
          1. All changes made in feature branch
          2. Pull request required for merge to main
          3. Automatic cleanup after merge
          
          ---
          *This issue was created automatically by the GitHub Copilot Branch Management workflow.*`,
            labels: ['copilot', 'automated', 'development']
          });
          
          core.info(`Created tracking issue #${issue.data.number}`);

  setup-branch-protection:
    runs-on: ubuntu-latest
    needs: create-branch
    steps:
    - name: Setup branch protection for main
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            await github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main',
              required_status_checks: null,
              enforce_admins: false,
              required_pull_request_reviews: {
                required_approving_review_count: 0,
                dismiss_stale_reviews: false,
                require_code_owner_reviews: false
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: false
            });
            core.info('Branch protection updated for main');
          } catch (error) {
            core.info(`Branch protection setup: ${error.message}`);
            // Continue even if branch protection fails (might not have admin rights)
          }

  notify-completion:
    runs-on: ubuntu-latest
    needs: [create-branch, setup-branch-protection]
    steps:
    - name: Post completion summary
      run: |
        echo "## âœ… Copilot Branch Workflow Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps for GitHub Copilot:" >> $GITHUB_STEP_SUMMARY
        echo "1. Switch to branch: \`${{ needs.create-branch.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "2. Make your changes and commits" >> $GITHUB_STEP_SUMMARY
        echo "3. Push changes to the feature branch" >> $GITHUB_STEP_SUMMARY
        echo "4. Create a Pull Request to merge back to main" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Commands:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "git checkout ${{ needs.create-branch.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
        echo "# Make your changes..." >> $GITHUB_STEP_SUMMARY
        echo "git add ." >> $GITHUB_STEP_SUMMARY
        echo "git commit -m \"Your commit message\"" >> $GITHUB_STEP_SUMMARY
        echo "git push origin ${{ needs.create-branch.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
