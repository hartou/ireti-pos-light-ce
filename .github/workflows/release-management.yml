name: 🚀 Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - hotfix
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      is_prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Check if pre-release
        id: check-prerelease
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if [[ "$VERSION" =~ (alpha|beta|rc) ]] || [[ "${{ github.event.inputs.pre_release }}" == "true" ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format valid: $VERSION"

      - name: Check if version exists
        run: |
          VERSION="${{ steps.extract-version.outputs.version }}"
          if git tag | grep -q "^$VERSION$"; then
            echo "❌ Version $VERSION already exists"
            exit 1
          fi
          echo "✅ Version $VERSION is new"

  run-tests:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests
        run: |
          python manage.py test --verbosity=2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          npm test

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -ll

      - name: Run Safety check
        run: |
          pip install -r requirements.txt
          safety check

  build-and-test-container:
    name: 🐳 Build and Test Container
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          docker build -t test-image:${{ needs.validate-release.outputs.version }} .

      - name: Test container
        run: |
          # Start container for testing
          docker run -d --name test-container \
            -p 8000:8000 \
            -e DEBUG=False \
            test-image:${{ needs.validate-release.outputs.version }}
          
          # Wait for container to start
          sleep 30
          
          # Basic health check
          curl -f http://localhost:8000/ || exit 1
          
          # Clean up
          docker stop test-container
          docker rm test-container

  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, security-scan, build-and-test-container]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Check if release notes file exists
          if [[ -f "RELEASE_NOTES_${VERSION}.md" ]]; then
            echo "Using existing release notes file: RELEASE_NOTES_${VERSION}.md"
            echo "notes_file=RELEASE_NOTES_${VERSION}.md" >> $GITHUB_OUTPUT
          else
            echo "Generating automatic release notes"
            # Get previous tag
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            
            # Generate release notes
            cat > "AUTO_RELEASE_NOTES_${VERSION}.md" << EOF
          # 🚀 Release ${VERSION}
          
          **Release Date**: $(date +%Y-%m-%d)
          **Release Type**: ${{ github.event.inputs.release_type || 'automated' }}
          
          ## 📝 Changes
          
          EOF
            
            if [[ -n "$PREV_TAG" ]]; then
              echo "### Commits since ${PREV_TAG}" >> "AUTO_RELEASE_NOTES_${VERSION}.md"
              git log --pretty=format:"- %s" ${PREV_TAG}..HEAD >> "AUTO_RELEASE_NOTES_${VERSION}.md"
            else
              echo "### All Commits" >> "AUTO_RELEASE_NOTES_${VERSION}.md"
              git log --pretty=format:"- %s" >> "AUTO_RELEASE_NOTES_${VERSION}.md"
            fi
            
            echo "notes_file=AUTO_RELEASE_NOTES_${VERSION}.md" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          NOTES_FILE="${{ steps.release-notes.outputs.notes_file }}"
          IS_PRERELEASE="${{ needs.validate-release.outputs.is_prerelease }}"
          
          # Determine release title
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            TITLE="🧪 Ireti POS Light ${VERSION} - Pre-release"
            PRERELEASE_FLAG="--prerelease"
          else
            TITLE="🚀 Ireti POS Light ${VERSION}"
            PRERELEASE_FLAG=""
          fi
          
          # Create release
          gh release create "$VERSION" \
            --title "$TITLE" \
            --notes-file "$NOTES_FILE" \
            $PRERELEASE_FLAG \
            --latest

      - name: Add deployment checklist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "📋 Release created successfully: $VERSION"

  notify-docker-build:
    name: 🐳 Docker Build Notification
    needs: [create-release, validate-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Docker build
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🐳 Docker image build will be triggered by tag push"
          echo "📦 Image will be available at: ghcr.io/${{ github.repository }}:$VERSION"

  post-release:
    name: 📢 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update latest release badge
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "Latest release: $VERSION" >> $GITHUB_STEP_SUMMARY

      - name: Notify teams (placeholder)
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🎉 Release $VERSION has been published!"
          echo "📦 Container image will be available shortly at ghcr.io/${{ github.repository }}:$VERSION"
          # Add actual notification logic here (Slack, email, etc.)

  cleanup-on-failure:
    name: 🧹 Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, security-scan, build-and-test-container, create-release, notify-docker-build]
    if: failure() && github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Delete tag if created
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Only delete if we created the tag in this workflow
          if git tag | grep -q "^$VERSION$"; then
            git tag -d "$VERSION" || true
            git push origin ":refs/tags/$VERSION" || true
            echo "Cleaned up tag $VERSION due to workflow failure"
          fi
