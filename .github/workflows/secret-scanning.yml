# Secret Scanning and Credential Leak Detection
# Scans for accidentally committed secrets, API keys, and credentials

name: "Secret Scanning"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 4 AM UTC  
    - cron: '0 4 * * 0'
  workflow_dispatch:

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for thorough scanning

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install secret scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets
        # Install GitLeaks for additional secret detection
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin/

    - name: Run detect-secrets baseline scan
      run: |
        echo "Running detect-secrets baseline scan..."
        detect-secrets scan --all-files --force-use-all-plugins --baseline .secrets.baseline || true
        
    - name: Run detect-secrets audit
      run: |
        echo "Running detect-secrets audit..."
        if [ -f ".secrets.baseline" ]; then
          detect-secrets audit .secrets.baseline || echo "Secrets audit completed with findings"
        fi

    - name: Run GitLeaks scan
      run: |
        echo "Running GitLeaks scan..."
        gitleaks detect --report-format json --report-path gitleaks-report.json --verbose || true
        gitleaks detect --report-format sarif --report-path gitleaks.sarif --verbose || true
        gitleaks detect || echo "GitLeaks scan completed with findings"

    - name: Custom secret pattern scan
      run: |
        echo "Running custom secret pattern scan for common leaked credentials..."
        
        # Scan for common secret patterns
        echo "Scanning for Stripe keys..."
        grep -r "sk_live_" . --exclude-dir=".git" --exclude="*.md" || echo "No live Stripe keys found"
        grep -r "sk_test_[a-zA-Z0-9]{99}" . --exclude-dir=".git" --exclude="*.md" || echo "No hardcoded test Stripe keys found"
        
        echo "Scanning for webhook secrets..."
        grep -r "whsec_" . --exclude-dir=".git" --exclude="*.md" || echo "No hardcoded webhook secrets found"
        
        echo "Scanning for database URLs..."
        grep -r "postgresql://.*:.*@" . --exclude-dir=".git" --exclude="*.md" || echo "No hardcoded database URLs found"
        grep -r "mysql://.*:.*@" . --exclude-dir=".git" --exclude="*.md" || echo "No hardcoded MySQL URLs found"
        
        echo "Scanning for AWS credentials..."
        grep -r "AKIA[0-9A-Z]{16}" . --exclude-dir=".git" --exclude="*.md" || echo "No AWS access keys found"

    - name: PCI Compliance Secret Check
      run: |
        echo "Running PCI compliance secret management check..."
        python scripts/pci_compliance_check.py | grep -A 5 -B 5 "secret" || echo "PCI secret management check completed"

    - name: Upload secret scanning reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scanning-reports
        path: |
          .secrets.baseline
          gitleaks-report.json
          gitleaks.sarif
        retention-days: 30

    - name: Upload GitLeaks SARIF results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gitleaks.sarif
      continue-on-error: true

    - name: Secret scanning summary
      if: always()
      run: |
        echo "=== SECRET SCANNING SUMMARY ==="
        echo "‚úÖ detect-secrets baseline scan - completed"
        echo "‚úÖ GitLeaks credential scan - completed"
        echo "‚úÖ Custom pattern matching - completed"
        echo "‚úÖ PCI compliance secret check - completed"
        echo ""
        echo "üîê Secret scanning completed"
        echo "üîç Check Security tab for any detected secrets"
        echo "üìã Review .secrets.baseline for approved exceptions"
        echo "‚ö†Ô∏è  Ensure no production secrets are committed to repository"