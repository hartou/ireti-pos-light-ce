# Dependency Vulnerability Scanning
# Scans Python dependencies for known security vulnerabilities using GitHub's Security Advisory Database

name: "Dependency Vulnerability Scan"

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'requirements.txt'
      - 'requirements/**'
      - 'setup.py'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'requirements.txt'
      - 'requirements/**'
      - 'setup.py'
      - 'pyproject.toml'
  schedule:
    # Run daily at 1 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: Run pip-audit (GitHub Security Advisory Database)
      run: |
        echo "Running pip-audit against GitHub Security Advisory Database..."
        pip-audit --requirement requirements.txt --format=json --output=pip-audit-report.json || true
        pip-audit --requirement requirements.txt --format=sarif --output=pip-audit.sarif || true
        pip-audit --requirement requirements.txt || echo "Pip-audit scan completed with findings"

    - name: Install Safety (Alternative scanner)
      run: |
        pip install safety

    - name: Run Safety scan
      run: |
        echo "Running Safety scan as secondary verification..."
        safety check --json --output safety-detailed.json || true
        safety check --full-report || echo "Safety scan completed with findings"

    - name: Upload vulnerability reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-vulnerability-reports
        path: |
          pip-audit-report.json
          pip-audit.sarif
          safety-detailed.json
        retention-days: 30

    - name: Upload SARIF results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: pip-audit.sarif
      continue-on-error: true

    - name: Check for critical vulnerabilities
      run: |
        echo "=== DEPENDENCY VULNERABILITY SUMMARY ==="
        
        # Check pip-audit results
        if [ -f "pip-audit-report.json" ]; then
          echo "📊 Pip-audit scan completed"
          VULN_COUNT=$(python -c "
        import json
        try:
            with open('pip-audit-report.json', 'r') as f:
                data = json.load(f)
                if isinstance(data, list):
                    print(len(data))
                else:
                    print(len(data.get('vulnerabilities', [])))
        except:
            print('0')
        " 2>/dev/null || echo "0")
          echo "🔍 Found $VULN_COUNT potential vulnerabilities"
        fi
        
        # Check safety results  
        if [ -f "safety-detailed.json" ]; then
          echo "📊 Safety scan completed"
        fi
        
        echo ""
        echo "✅ Dependency vulnerability scanning completed"
        echo "🔍 Check Security tab and workflow artifacts for detailed results"
        echo "📋 Review requirements.txt for necessary updates"