"""
Django settings for iretilightpos project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from django.utils.translation import gettext_lazy as _
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parents[2]
PROJECT_DIR = os.path.join(BASE_DIR, "iretilightpos")

CART_SESSION_ID = 'cart'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# Application definition
INSTALLED_APPS = [
    # "admin_interface", #Interface if Admin Port Customization is needed
    "colorfield",
    'iretilightpos.admin.MyAdminConfig',#'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'jquery',
    'mathfilters',
    'inventory',
    'transaction',
    'cart',
    'payments',  # Stripe payment integration
    'import_export',
    'rangefilter',
    'django_admin_logs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'iretilightpos.middleware.PWASecurityMiddleware',  # PWA security headers
    'iretilightpos.middleware.PaymentAuditMiddleware',  # Payment audit logging
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SILENCED_SYSTEM_CHECKS = ["security.W019"]

# PWA Security Headers (PWA-014)
# Content Security Policy allowing Service Worker and required resources
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# CSP for PWA compatibility
CSP_DEFAULT_SRC = "'self'"
CSP_SCRIPT_SRC = "'self' 'unsafe-inline' https://code.jquery.com https://cdn.datatables.net https://cdn.plot.ly https://fonts.googleapis.com"
CSP_STYLE_SRC = "'self' 'unsafe-inline' https://fonts.googleapis.com https://code.jquery.com https://cdn.datatables.net"
CSP_FONT_SRC = "'self' https://fonts.gstatic.com data:"
CSP_IMG_SRC = "'self' data: blob:"
CSP_CONNECT_SRC = "'self'"
CSP_WORKER_SRC = "'self'"
CSP_MANIFEST_SRC = "'self'"

# Service Worker specific headers
SERVICE_WORKER_ALLOWED = '/'

ROOT_URLCONF = 'iretilightpos.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_DIR, "templates"),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'iretilightpos.wsgi.application'

# Authentication
LOGIN_URL = '/user/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR,'static')
STATIC_URL = f"/static/"
STATICFILES_DIRS = (os.path.join(PROJECT_DIR,'static'),)
# MEDIA_URL = 'media/'
# MEDIA_ROOT = Path.joinpath(PROJECT_DIR, "media/")
# # Assets Management
# ASSETS_ROOT = Path.joinpath(STATIC_ROOT,'assets/')


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Internationalization / Localization
LANGUAGES = (
    ('en', _('English')),
    ('fr', _('French')),
    ('es', _('Spanish')),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# PWA-014: Security Headers for PWA compliance
# Content Security Policy to allow service worker and required resources
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = "SAMEORIGIN"  # Updated to support PWA install

# Content Security Policy for PWA
CSP_DEFAULT_SRC = "'self'"
CSP_SCRIPT_SRC = "'self' 'unsafe-inline' 'unsafe-eval' https://code.jquery.com https://cdn.plot.ly https://cdn.datatables.net https://fonts.googleapis.com"
CSP_STYLE_SRC = "'self' 'unsafe-inline' https://fonts.googleapis.com https://code.jquery.com https://cdn.datatables.net"
CSP_FONT_SRC = "'self' https://fonts.gstatic.com data:"
CSP_IMG_SRC = "'self' data: blob:"
CSP_CONNECT_SRC = "'self'"
CSP_MANIFEST_SRC = "'self'"
CSP_WORKER_SRC = "'self'"

# Service Worker specific headers
SERVICE_WORKER_ALLOWED = "/"

# PWA Security Headers
SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# Stripe Payment Configuration
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_ENDPOINT_SECRET = os.environ.get('STRIPE_WEBHOOK_ENDPOINT_SECRET', '')

# Payment Processing Settings
PAYMENT_DEFAULT_CURRENCY = 'USD'
PAYMENT_CAPTURE_METHOD = 'automatic'  # or 'manual' for manual capture
PAYMENT_REFUND_AUTHORIZATION_THRESHOLD = 100.00  # Require manager approval for refunds over this amount

# Secure Logging Configuration (PCI DSS Compliance)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'secure': {
            '()': 'payments.logging_utils.SecureFormatter',
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'standard': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'secure'
        },
        'file_payments': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'payments.log'),
            'maxBytes': 10485760,  # 10MB
            'backupCount': 5,
            'formatter': 'secure',
        },
        'file_audit': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'audit.log'),
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,  # Keep more audit logs
            'formatter': 'secure',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'secure',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
        },
        'payments': {
            'handlers': ['console', 'file_payments', 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        },
        'payments.audit': {
            'handlers': ['file_audit', 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        },
        'iretilightpos.middleware': {
            'handlers': ['console', 'file_audit'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Terminal Configuration
STRIPE_TERMINAL_LOCATION_ID = os.environ.get('STRIPE_TERMINAL_LOCATION_ID', '')

# Logging configuration for payments
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'payments.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'payments': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET')
STRIPE_WEBHOOK_ENDPOINT_SECRET = os.environ.get('STRIPE_WEBHOOK_ENDPOINT_SECRET')

# Validate Stripe configuration in non-test environments
if not os.environ.get('DJANGO_TESTING'):
    if not STRIPE_SECRET_KEY:
        raise ValueError("STRIPE_SECRET_KEY environment variable is required")
    if not STRIPE_PUBLISHABLE_KEY:
        raise ValueError("STRIPE_PUBLISHABLE_KEY environment variable is required")
    
    # Validate key format
    if STRIPE_SECRET_KEY and not (STRIPE_SECRET_KEY.startswith('sk_test_') or STRIPE_SECRET_KEY.startswith('sk_live_')):
        raise ValueError("STRIPE_SECRET_KEY must start with 'sk_test_' or 'sk_live_'")
    if STRIPE_PUBLISHABLE_KEY and not (STRIPE_PUBLISHABLE_KEY.startswith('pk_test_') or STRIPE_PUBLISHABLE_KEY.startswith('pk_live_')):
        raise ValueError("STRIPE_PUBLISHABLE_KEY must start with 'pk_test_' or 'pk_live_'")

# Stripe currency settings
STRIPE_DEFAULT_CURRENCY = 'usd'
STRIPE_LIVE_MODE = STRIPE_SECRET_KEY.startswith('sk_live_') if STRIPE_SECRET_KEY else False

# Store Configuration
STORE_NAME = "Ireti POS Light"


