# Generated by Django 4.1.13 on 2025-09-01 04:57

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("transaction", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for payment method",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "stripe_payment_method_type",
                    models.CharField(
                        choices=[
                            ("card", "Credit/Debit Card"),
                            ("us_bank_account", "US Bank Account"),
                            ("sepa_debit", "SEPA Direct Debit"),
                            ("ideal", "iDEAL"),
                            ("sofort", "Sofort"),
                            ("bancontact", "Bancontact"),
                            ("giropay", "Giropay"),
                            ("p24", "Przelewy24"),
                            ("eps", "EPS"),
                            ("fpx", "FPX"),
                            ("grabpay", "GrabPay"),
                            ("alipay", "Alipay"),
                            ("wechat_pay", "WeChat Pay"),
                        ],
                        help_text="Stripe payment method type identifier",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this payment method is active"
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Sort order for display (lower numbers first)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Payment Method",
                "verbose_name_plural": "Payment Methods",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="PaymentRefund",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Refund amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="usd", help_text="Refund currency", max_length=3
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("duplicate", "Duplicate"),
                            ("fraudulent", "Fraudulent"),
                            ("requested_by_customer", "Requested by Customer"),
                            ("expired_uncaptured_charge", "Expired Uncaptured Charge"),
                        ],
                        help_text="Reason for refund",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Refund description", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                        ],
                        default="pending",
                        help_text="Refund status",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_refund_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe Refund ID",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "failure_reason",
                    models.TextField(
                        blank=True, help_text="Reason for refund failure", null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional refund metadata"
                    ),
                ),
                (
                    "idempotency_key",
                    models.CharField(
                        blank=True,
                        help_text="Idempotency key for preventing duplicate refunds",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, help_text="When refund was processed", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Refund",
                "verbose_name_plural": "Payment Refunds",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Payment amount",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("usd", "USD"),
                            ("eur", "EUR"),
                            ("gbp", "GBP"),
                            ("cad", "CAD"),
                            ("aud", "AUD"),
                            ("jpy", "JPY"),
                        ],
                        default="usd",
                        help_text="Payment currency",
                        max_length=3,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                        ],
                        default="pending",
                        help_text="Payment status",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(
                        blank=True,
                        help_text="Stripe PaymentIntent ID",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "stripe_client_secret",
                    models.CharField(
                        blank=True,
                        help_text="Stripe client secret for frontend",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "stripe_status",
                    models.CharField(
                        blank=True,
                        help_text="Status from Stripe",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "last_payment_error",
                    models.TextField(
                        blank=True,
                        help_text="Last error message from Stripe",
                        null=True,
                    ),
                ),
                (
                    "failure_reason",
                    models.TextField(
                        blank=True, help_text="Reason for payment failure", null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional payment metadata",
                    ),
                ),
                (
                    "idempotency_key",
                    models.CharField(
                        blank=True,
                        help_text="Idempotency key for preventing duplicate charges",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "processed_at",
                    models.DateTimeField(
                        blank=True, help_text="When payment was processed", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Transaction",
                "verbose_name_plural": "Payment Transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentWebhook",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stripe_event_id",
                    models.CharField(
                        help_text="Stripe event ID", max_length=255, unique=True
                    ),
                ),
                (
                    "event_type",
                    models.CharField(help_text="Type of Stripe event", max_length=100),
                ),
                (
                    "processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the webhook has been processed",
                    ),
                ),
                (
                    "processing_error",
                    models.TextField(
                        blank=True,
                        help_text="Error message if processing failed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Payment Webhook",
                "verbose_name_plural": "Payment Webhooks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="paymentwebhook",
            index=models.Index(
                fields=["stripe_event_id"], name="payments_pa_stripe__922382_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentwebhook",
            index=models.Index(
                fields=["event_type", "processed"],
                name="payments_pa_event_t_4c55bd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentwebhook",
            index=models.Index(
                fields=["created_at"], name="payments_pa_created_f1f270_idx"
            ),
        ),
        migrations.AddField(
            model_name="paymenttransaction",
            name="payment_method",
            field=models.ForeignKey(
                blank=True,
                help_text="Payment method used",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="transactions",
                to="payments.paymentmethod",
            ),
        ),
        migrations.AddField(
            model_name="paymenttransaction",
            name="processed_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who processed the payment",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="processed_payments",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="paymenttransaction",
            name="transaction",
            field=models.ForeignKey(
                blank=True,
                help_text="Related POS transaction",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="payment_transactions",
                to="transaction.transaction",
            ),
        ),
        migrations.AddField(
            model_name="paymentrefund",
            name="authorized_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who authorized the refund (if different from processor)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="authorized_refunds",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="paymentrefund",
            name="payment_transaction",
            field=models.ForeignKey(
                help_text="Related payment transaction",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="refunds",
                to="payments.paymenttransaction",
            ),
        ),
        migrations.AddField(
            model_name="paymentrefund",
            name="processed_by",
            field=models.ForeignKey(
                help_text="User who processed the refund",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="processed_refunds",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["stripe_payment_intent_id"],
                name="payments_pa_stripe__3365e3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["status", "created_at"], name="payments_pa_status_c4e513_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymenttransaction",
            index=models.Index(
                fields=["transaction", "status"], name="payments_pa_transac_cfd8e3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["stripe_refund_id"], name="payments_pa_stripe__5345b8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["status", "created_at"], name="payments_pa_status_bd676a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["payment_transaction", "status"],
                name="payments_pa_payment_b0ef99_idx",
            ),
        ),
    ]
